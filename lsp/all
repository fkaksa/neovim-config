-- Next, you can provide targeted overrides for specific servers.
['yamlls'] = function()
  require('lspconfig').yamlls.setup({
    filetypes = { 'yaml', 'yml' },
    settings = {
      yaml = {
        schemas = {
          -- helm unittest
          ["https://raw.githubusercontent.com/helm-unittest/helm-unittest/v0.4.1/schema/helm-testsuite.json"] =
          "tests/*_test.yaml",
          ["http://json.schemastore.org/ansible-stable-2.9"] = "roles/tasks/*.{yml,yaml}",
          ["http://json.schemastore.org/kustomization"] = "kustomization.{yml,yaml}",
          ["http://json.schemastore.org/ansible-playbook"] = "*play*.{yml,yaml}",
          ["http://json.schemastore.org/chart"] = "Chart.{yml,yaml}",
          ["https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json"] =
          "*docker-compose*.{yml,yaml}",
          ["https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/helmfile.json"] =
          "helmfile.{yml,yaml}",
          ["https://json.schemastore.org/github-workflow.json"] = "/.github/workflows/*",
          -- kubernetes = "/*.yaml",
        },
        schemaStore = {
          enable = true,
        },
        validate = true,
        completion = true,
        hover = true,
        format = {
          enable = true,
        },
        trace = {
          server = "verbose"
        },
      },
    },
  })
end,


['groovyls'] = function()
  require('lspconfig').groovyls.setup({
    filetypes = { 'groovy', 'jenkinsfile' },
    settings = {
      groovy = {
        format = {
          enable = true,
        },
      }
    }
  })
end,

['gopls'] = function()
  require('lspconfig').gopls.setup({
    filetypes = { 'go', 'gomod', 'gowrok', 'gotpml' },
    settings = {
      gopls = {
        analyses = {
          unusedparams = true,
        },
        staticcheck = true,
        completeUnimported = true,
        usePlaceholders = true,
        hints = {
          assignVariableTypes = true,
        }
      },
    },
  })
end,

['jsonls'] = function()
  require('lspconfig').jsonls.setup({
    filetypes = { 'json' },
    settings = {
      json = {
        schemas = {
          {
            fileMatch = { 'package.json' },
            url = 'https://json.schemastore.org/package.json',
          },
          {
            fileMatch = { 'tsconfig*.json' },
            url = 'https://json.schemastore.org/tsconfig.json',
          },
          {
            fileMatch = { '.eslintrc.json' },
            url = 'https://json.schemastore.org/eslintrc.json',
          },
          {
            fileMatch = { '.prettierrc', '.prettierrc.json' },
            url = 'https://json.schemastore.org/prettierrc.json',
          },
          {
            fileMatch = { '.babelrc', '.babelrc.json', 'babel.config.json' },
            url = 'https://json.schemastore.org/babelrc.json',
          },
          {
            fileMatch = { 'lerna.json' },
            url = 'https://json.schemastore.org/lerna.json',
          },
          {
            fileMatch = { 'now.json', 'vercel.json' },
            url = 'https://json.schemastore.org/now.json',
          },
          {
            fileMatch = { 'tsconfig*.json' },
            url = 'https://json.schemastore.org/tsconfig.json',
          },
          {
            fileMatch = { 'jest.config.js' },
            url = 'https://json.schemastore.org/jest-config.json',
          },
        },
      },
    },
  })
end,

['lemminx'] = function()
  require('lspconfig').lemminx.setup({
    filetypes = { 'xml' },
  })
end,

['marksman'] = function()
  require('lspconfig').marksman.setup({
    filetypes = { 'markdown' },
  })
end,

['basedpyright'] = function()
  require('lspconfig').basedpyright.setup({
    filetypes = { 'python' },
    settings = {
      python = {
        analysis = {
          typeCheckingMode = 'basic',
          autoSearchPaths = true,
          useLibraryCodeForTypes = true,
        }
      }
    }
  })
end,

['terraformls'] = function()
  require('lspconfig').terraformls.setup({
    -- on_attach = function(client)
    -- end,
    cmd = { "terraform-ls", "serve", "-req-concurrency", "20" },
    validations = {
      enableEnhancedValidation = true,
    },
    init_options = {
      experimentalFeatures = {
        prefillRequiredFields = true,
        validateOnSave = true,
      }
    }
  })
end,

['tflint'] = function()
  require('lspconfig').tflint.setup({})
end,

['kotlin_language_server'] = function()
  require('lspconfig').kotlin_language_server.setup({})
end,


